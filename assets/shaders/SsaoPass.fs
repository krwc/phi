#version 430
#extension GL_ARB_shading_language_include : enable
layout(location=0) out vec4 FragColor;

uniform sampler2D g_TexNormal;
uniform sampler2D g_TexNoise;
uniform sampler2D g_TexDepth;
uniform sampler2D g_TexPosition;

uniform float g_Radius = 1.5f;
uniform float g_Power = 1.0f;
uniform float g_Bias = 0.05f;

uniform float g_InvNoiseSize;
uniform vec2 g_ScreenSize;
uniform mat4 g_ProjMatrix;
uniform mat4 g_InvProjMatrix;
uniform mat4 g_InvViewMatrix;
uniform float g_Near = 0.1f;;
uniform float g_Far = 1000.0f;

in vec2 UV;

const vec3 HemisphereSamples[128] = vec3[](
vec3(0.010068, -0.019681, 0.003757),
vec3(0.014733, -0.015023, 0.004237),
vec3(0.004099, 0.009315, 0.008651),
vec3(0.015164, 0.018574, 0.058056),
vec3(-0.065169, -0.075670, 0.021531),
vec3(-0.012276, 0.007076, 0.016891),
vec3(0.035915, 0.061937, 0.006561),
vec3(-0.041752, 0.046968, 0.037436),
vec3(0.006783, 0.025953, 0.005791),
vec3(0.004422, 0.073656, 0.076204),
vec3(-0.052369, 0.052545, 0.038605),
vec3(-0.035249, 0.042237, 0.007922),
vec3(-0.077930, -0.032624, 0.081116),
vec3(0.002159, 0.002232, 0.000317),
vec3(-0.059003, 0.070086, 0.068791),
vec3(-0.010928, 0.041822, 0.070511),
vec3(-0.082775, 0.021815, 0.007837),
vec3(0.030386, -0.016213, 0.008986),
vec3(0.051644, 0.057534, 0.061185),
vec3(0.029426, 0.031335, 0.022498),
vec3(-0.063532, -0.075335, 0.053093),
vec3(0.023051, -0.010689, 0.043565),
vec3(-0.095477, 0.000253, 0.100952),
vec3(0.036963, -0.070057, 0.060172),
vec3(0.007282, -0.002652, 0.000098),
vec3(-0.015932, 0.074700, 0.025261),
vec3(0.042741, 0.012587, 0.038328),
vec3(0.085694, 0.087973, 0.049777),
vec3(0.020103, -0.020156, 0.078469),
vec3(-0.054005, 0.007066, 0.012057),
vec3(-0.075937, -0.099930, 0.037710),
vec3(-0.012613, 0.012158, 0.009337),
vec3(-0.042329, 0.027630, 0.059053),
vec3(-0.107746, 0.013352, 0.081447),
vec3(-0.053277, -0.050361, 0.020484),
vec3(0.010192, -0.011376, 0.007941),
vec3(-0.036426, -0.006079, 0.019615),
vec3(0.154363, -0.060689, 0.044761),
vec3(-0.139285, 0.097837, 0.034578),
vec3(-0.070807, 0.099803, 0.155180),
vec3(-0.011554, -0.013270, 0.002057),
vec3(-0.001016, -0.024413, 0.011589),
vec3(-0.054462, -0.017751, 0.014811),
vec3(0.022522, -0.060179, 0.057670),
vec3(0.012470, -0.132571, 0.152307),
vec3(-0.046297, -0.043923, 0.054448),
vec3(-0.028008, -0.026417, 0.032417),
vec3(-0.055344, 0.058876, 0.070753),
vec3(-0.020591, -0.071447, 0.057890),
vec3(-0.003029, -0.001575, 0.001367),
vec3(0.104200, 0.056550, 0.119734),
vec3(0.000177, 0.009277, 0.075510),
vec3(0.061505, -0.013602, 0.046343),
vec3(-0.127270, -0.095918, 0.210726),
vec3(0.102590, 0.036717, 0.124970),
vec3(-0.012993, -0.077371, 0.149898),
vec3(-0.150586, 0.014460, 0.019260),
vec3(-0.114306, 0.043595, 0.066622),
vec3(-0.039143, -0.157138, 0.116483),
vec3(-0.199965, -0.128702, 0.177541),
vec3(-0.015380, 0.252771, 0.003692),
vec3(0.034490, 0.039168, 0.119475),
vec3(0.146616, -0.081548, 0.108336),
vec3(0.008603, -0.002470, 0.005316),
vec3(-0.057058, 0.053629, 0.064063),
vec3(0.257101, -0.036397, 0.134915),
vec3(-0.040859, 0.087473, 0.037338),
vec3(-0.089273, 0.078366, 0.143428),
vec3(0.010849, 0.011971, 0.004257),
vec3(0.066122, 0.002882, 0.082980),
vec3(-0.169517, -0.131113, 0.057154),
vec3(0.161145, 0.036533, 0.094453),
vec3(0.073847, -0.017539, 0.083406),
vec3(-0.118566, 0.194031, 0.254188),
vec3(0.011675, 0.090513, 0.157152),
vec3(0.285764, 0.228055, 0.145495),
vec3(-0.021818, 0.323219, 0.268797),
vec3(0.260237, 0.138926, 0.268938),
vec3(0.095878, 0.097314, 0.068947),
vec3(0.167524, 0.169248, 0.036389),
vec3(-0.034278, 0.110016, 0.358190),
vec3(-0.007625, 0.027099, 0.013908),
vec3(-0.065234, 0.287483, 0.261847),
vec3(0.024925, -0.003660, 0.011585),
vec3(0.163127, 0.104831, 0.170800),
vec3(0.261934, -0.204713, 0.397863),
vec3(-0.158009, 0.210754, 0.117222),
vec3(0.182364, 0.487568, 0.111385),
vec3(0.122419, -0.237080, 0.274049),
vec3(0.009716, 0.002797, 0.005054),
vec3(-0.449456, 0.154920, 0.115353),
vec3(-0.220449, -0.394545, 0.409498),
vec3(-0.522305, -0.088378, 0.310086),
vec3(-0.053962, 0.015827, 0.003919),
vec3(-0.076137, -0.061422, 0.058096),
vec3(-0.008594, -0.006690, 0.035906),
vec3(-0.239534, -0.038402, 0.200268),
vec3(-0.176173, -0.274590, 0.114400),
vec3(-0.536051, -0.404003, 0.043729),
vec3(0.026141, 0.025525, 0.010540),
vec3(-0.056214, 0.082209, 0.052531),
vec3(-0.000024, 0.001241, 0.006842),
vec3(0.163306, -0.112240, 0.239574),
vec3(-0.249886, 0.290171, 0.056068),
vec3(0.039336, -0.039792, 0.023239),
vec3(0.357341, 0.354497, 0.249162),
vec3(0.183879, -0.126180, 0.134996),
vec3(0.006803, 0.014571, 0.012494),
vec3(0.329122, 0.459147, 0.196341),
vec3(-0.031580, -0.159837, 0.050836),
vec3(0.118905, -0.058690, 0.013116),
vec3(0.341199, -0.201065, 0.295965),
vec3(0.102829, 0.230461, 0.130488),
vec3(-0.100186, 0.267787, 0.810025),
vec3(0.038730, -0.010968, 0.030711),
vec3(-0.408418, -0.031736, 0.343606),
vec3(0.324002, -0.218675, 0.334091),
vec3(0.005437, -0.002721, 0.040014),
vec3(0.218530, 0.051227, 0.363257),
vec3(-0.383375, -0.383711, 0.363381),
vec3(0.815003, -0.385494, 0.349659),
vec3(-0.340982, -0.125695, 0.373428),
vec3(-0.164514, -0.267301, 0.784420),
vec3(0.127146, -0.109165, 0.043153),
vec3(-0.079427, -0.098729, 0.645747),
vec3(-0.273156, 0.230279, 0.274413),
vec3(-0.181259, 0.193434, 0.399518),
vec3(-0.108167, 0.143914, 0.201332)
);

vec3 GetNoise(in vec2 uv) {
    return texture(g_TexNoise, uv * g_ScreenSize * g_InvNoiseSize).xyz;
}

vec3 GetNormal(in vec2 uv) {
    return normalize(texture(g_TexNormal, uv).xyz);
}

vec4 GetPosition(in vec2 uv) {
    float z = 2.0 * texture(g_TexDepth, uv).r - 1.;
    float x = uv.x * 2. - 1.;
    float y = uv.y * 2. - 1.;
    vec4 P = vec4(x, y, z, 1.0f);
    P = g_InvProjMatrix * P;
    return P /= P.w;
}

void main() {
    const vec3 N = GetNormal(UV);
    const vec4 P = GetPosition(UV);
    const vec3 R = GetNoise(UV);
    vec3 T = normalize(R - N * dot(R, N));
    vec3 B = cross(N, T);
    mat3 TBN = mat3(T, B, N);

    float Ao = 0.0f;
    const int NUM_SAMPLES = 64;
    for (int i = 0; i < NUM_SAMPLES; ++i) {
        vec3 Sample = TBN * HemisphereSamples[i];
        Sample = Sample * g_Radius + P.xyz;

        vec4 Offset = vec4(Sample, 1.);
        Offset = g_ProjMatrix * Offset;
        Offset.xy /= Offset.w;
        Offset.xy = Offset.xy * 0.5 + 0.5;

        float SampleDepth = GetPosition(Offset.xy).z;
        float RangeCheck = abs(P.z - SampleDepth) < g_Radius ? 1.0f : 0.0f;
        Ao += RangeCheck * (Sample.z + g_Bias < SampleDepth ? 1.0 : 0.0);
    }
    Ao /= NUM_SAMPLES;

    FragColor = vec4(clamp(1 - pow(1-Ao, g_Power), 0, 1));
}
